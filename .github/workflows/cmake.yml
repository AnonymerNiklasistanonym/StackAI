name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install necessary dependencies
      run: sudo apt-get install libsfml-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  check:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install necessary dependencies
      run: sudo apt-get install libsfml-dev cppcheck

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCHECK_CODE=ON

    - name: Build and CppCheck
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      # Ignore errors (temporarily)
      continue-on-error: true

  test:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install necessary dependencies
      run: sudo apt-get install libsfml-dev

    - name: Install catch2 via git because UBUNTU SUCKS BIG TIME and pacman is just so much better without even trying
      run: |
        git clone --single-branch --branch v2.x https://github.com/catchorg/Catch2.git
        cd Catch2
        cmake -B ${{github.workspace}}/build_cmake -DBUILD_TESTING=OFF
        sudo cmake --build ${{github.workspace}}/build_cmake --target install
        rm -rf ${{github.workspace}}/build_cmake
        cd ..
        rm -rf ${{github.workspace}}/Catch2

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build test
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target tests

    - name: Run test
      # Run CTest which should automatically discover all tests
      # In the future replace --verbose with --output-on-failure
      run: ctest --test-dir ${{github.workspace}}/build --verbose
